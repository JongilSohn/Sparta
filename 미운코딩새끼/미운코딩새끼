
문자열을 자르기 위해선 

Java 에서는
public static void main(String[] args) {
    String msg = "Life is Short!";
    for(String m : msg.split(""))
    System.out.print(m);
}

파이썬 에서는
msg = "Life is Short!"
print(msg.split())

--------------------------------------------------------

Stack over flow = 코딩계의 네이버 지식인 같은 

idle을 실행하면
바로바로 출력이 가능하다.

파이썬 튜터 라는 사이트 에서 라이브 프로그래밍

--------------------------------------------------------

Numberic 숫자형 (정수형, 실수형)
float = 실수형
int = 정수형

my_float = 3.14
type(my_float)
==> <class 'float'>
my_int=1
type(my_int)
==> <class 'int'>

type은  변수의 타입을 보여준다

--------------------------------------------------------

String 문자열

--------------------------------------------------------

Boolean 참,거짓 / 즉, 예, 아니오
True or False

--------------------------------------------------------

List    [val1, val2]

my_list = [1, 2, 3]

students = ['a', 'b', 'c', 'd']

for a in students:
    print(a)
==> a
    b
    c

import random
print(random.choice(students))
=> a, b, c 중에 랜덤으로 한명만 뽑아온다.

students.append('e') 하면
students = ['a', 'b', 'c', 'd', 'e']
로 추가된다.

studens[1] = 'f' 하면 'b'가 'f'로 변경된다.


- tuple     --> List는 [] tuple은 ()

tuple은 변경 불가능하다. (값을 바꿀 수 없다.)
my_tuple = ('a', 'b', 'c', 'd')
my_tuple[0] = 't' 시 에러가 난다.





-Dictionary 는 {키:밸류, 키:밸류} 로 저장할 수 있다.

my_dict = {'이름' : '손종일', '나이' : 30}
my_dict['이름']
==> '손종일'

my_dict['이름'] = '전보라'
my_dict
==> '이름' : '전보라' , '나이' : 30 으로 변경된다.

--------------------------------------------------------

자료형 변환하기.

my_int = 1
type(my_int)
==> <class 'int'>

float(my_int)
==> 1.0   으로 정수형이 실수형으로 변환된다.

str(my_int)
==> '1'  으로 문자열로 변환된다.

my_str = 'coding'
list(my_str)
==>['c', 'o', 'd', 'i', 'n', 'g']

--------------------------------------------------------

Comment 주석

파이썬 에서는 # 내용 으로 주석을 달 수 있다.

--------------------------------------------------------

문자열
"str" , 'str' 
my_str = :"손씨가족"
print(my_str)
==>김씨가족
type(my_str)
<class 'str'>

my_str = '전씨가족'
print(my_str)
==>전씨가족
type(my_str)
<class 'str'>

my_str = """제스퍼          ---> 큰 따옴표 3개를 써서 여러줄의 문자열을 정할 수 있다.
            토미
            메타"""
my_str
==> '제스퍼\n토미\n메타'

--------------------------------------------------------

Formatting 문자열을 더 잘 표현하기 위해 사용한다.

%d, %f, %s

my_str = 'My name is %s' % 'Sohn'
my_str
==> 'My name is Sohn'

'%d %d' % (1, 2)
==> '1 2'

'%f' % 3.14
'3.140000'

--------------------------------------------------------

Format '{}'.format()  포멧 메소드를 더 많이 사용한다.

'My name is $s' % '손종일'
==> 'My name is 손종일'

'My name is{}'.format(손종일)
==> 'My name is 손종일'

'{} x {} = {}'.format(2,3,2*3)
==> '2x3=6'

'{1}x{0}={2}'.format()(2,3,2*3)     // {1} {0}, {2} 는 인덱스로 나타낼 수 있다.
==> '3x2=6'                             2,3,2*3의 인덱으는 0,1,2 순으로!!

--------------------------------------------------------

Indexing (주소, 위치)

my_name = "손종일 전보라 야야야"
my_name[0]
==> 손

음수로 지정할 수 있다.
반대로 끝부터 -1, -2 순으로 간다.
-1은 야, -11은 손

--------------------------------------------------------

Slicing  

 P y t h o n
0 1 2 3 4 5 6
[1:4] --> yth

my_name = "손종일 전보라 야야야"
my_name[4:7]    4~7 사이를 뽑아오다.
==> '전보라'

my_name[:4]     앞에서 4까지 뽑아온다.
==> '손종일'

my_name[4:]     4부터 끝까지 뽑아온다.
==>'전보라 야야야' 

--------------------------------------------------------

string.split()  --> 매소드
문자열을 공백 단위로 잘라준다.

my_name = "손종일 전보라 야야야"
my_name.split()
==> '손종일', '전보라', '야야야'
my_name.split(' ')
==> '손종일', '전보라', '야야야'
my_name.split('야')
==> '손종일', '전보라', '', '', ''


fruit_str= '거봉 수박 포도 복숭아 망고 딸기 배 참외 찹쌀떡'
fruit_str.splt()
==> ['거봉', '수박', '포도', '복숭아', '망고', '딸기', '배', '참외', '찹쌀떡']

--------------------------------------------------------

Docstirng   """주석""" 이것을 추석처리를 할 수 있다. 보통 함수 설명을 위해 사용한다.

--------------------------------------------------------

end, 이스케이프 코드

print('', end='')

 print('손종일)
 ==> 손종일(엔터) 로 엔터가 들어간다.

 but,
 print('손종일', end='')
 ==> 손종일 로 엔터가 들어가지 않는다.

  print('손종일', end='/')
  ==> 손종일/ 


이스케이프 코드 \n, \t  
--> \n 줄바꿈, \t 탭

--------------------------------------------------------

List   여러개의 값을 한곳에 모아 저장할 수 있다.
    immutable  : 값을 변경할 수 없다.
    mutable : 값을 변경할 수 있다.

std = ['a', 'b', 'c']
==>['a', 'b', 'c']

std.append('d')
std ==> ['a', 'b', 'c', 'd']

person = []
person.append('손종일')
person.append('전보라')
person.append('전희라')
person
==>['손종일', '전보라', '전희라']

animals.append['a']
==> 오류 출력된다.  (animals라는 변수를 지정하지 않았기 때문이다.)

--------------------------------------------------------

Indexing 인덱스 주소 위치를 이용하여 변수에 접근.

animals = ['코알라', '하이에나', '스컹크', '하마', '고래', '다람쥐']
하이애나를 가져오고 싶다.
animals[1]
==> '하이에나'

하마를 없애고 싶다.
del animals[3]
==> ['코알라', '하이에나', '스컹크', '고래', '다람쥐']

animals[1:3]
==> ['하이에나', '스컹크']

--------------------------------------------------------

메소드 list.sort()  정렬 및 원소 갯수 카운트

animals = ['코알라', '하이에나', '스컹크', '하마', '고래', '다람쥐']
animals.sort()
==> ㄱ ㄴ ㄷ 순으로 정렬된다.  

animals.count('고래')
=> 고래의 수를 센다.

del animals[1]하면 제거 가능.

len(animals)
==> 리스트에 있는 전체 갯수를 셀 수 있다.

--------------------------------------------------------

튜플 (값을 변경할 수 없다.)

list는 mutable(변경가능), tuple은 immutable(변경불가)이다.

my_tuple =()
type(my_tuple)
==> <class tuple>

my_tuple = (1, 2, 3)
type(my_tuple)
==> <class tuple>

--------------------------------------------------------

패킹, 언패킹   (여러개를 하나로 묶는다. 푼다.)
Packing(하나로 묶는다), unpacking여러개로 푼다.)

my_tuple = 1, 2, 3
num1, num2, num3 = my_tuple
num1 ==> 1
num2 ==> 2
num3 ==> 3

num1 = 1
num2 = 2
num1, num2 = num2, num1
num1 = 2가 되고, num2 = 1이 된다.   (분배)

--------------------------------------------------------

for  

for 변수 in 컨테이너:
실행할 명령1
실행할 명령2
....

animals = ['코알라', '하이에나', '스컹크', '하마', '고래', '다람쥐']
for a in animals:
    print(a)
==>
코알라
하이애나
..

for num in [1,2,3]:
    print(num)
==>
1
2
3

for my_str in "김왼손의 왼손코딩":
    print(my_str)
==>
김
왼
손
의
...


--------------------------------------------------------

range() 

rang(3)
==> range(0,3)

range(3, 5)
==>3, 4

type(range(3))
==> <class 'range'>

[0, 1, 2]와 range(3) 과 같다,.

for n in [0, 1, 2]:
    print(n)
==>
0
1
2

for n in range(0, 3):
    print(n)
==>
0
1
2

ex) 0~99 까지 출력하고 싶다 하면
for n in range(0, 100):
    print(n)
==>
0
...
99

--------------------------------------------------------

for x 2         --> for문 중첩

idle -> 파일 -> 뉴파일
코딩하고 저장 -> run -> run module  하면 바로 실행.

for a in range(2, 10):
    for b in range(1,10):
        print('{}x{}={}'.format(a, b, a*b))
        //format을 사용하지 않으면 문자열에 변수가 대입되지 않는다.

하면 구구단이 출력된다.

--------------------------------------------------------

컴프리헨션 --> 어렵지만 많이 사용된다.

numbers = [1,2,3,4,5,6,7,8,9,10]
odd_numbers = []

for num in numbers:
    if number % 2 ==1:
    odd_numbers.append(num)
print(odd_numbers)



numbers = [1,2,3,4,5,6,7,8,9,10]
odd_numbers = []
for num in numbers:
    if num % 2 ==1:
        odd_numbers.append(num)
print(odd_numbers)

0~10 까지의 숫자 중 홀수만 odd_numbers에 넣는다.

[number for number in numbers if number % 2 ==1]   --> 위의 코드와 같다.

--------------------------------------------------------

Operator 연산자.

1. assign 할당 (=) 
=, +=, -=, *=, /= 
오른쪽에 있는 값을 왼쪽에 할당한다.
a=0
a+=1  -> a=1


2. Artithemtic 산술연산자
+ - * /  4칙 연산
**제곱  //몫   %나머지  특수연산자

3. 문자열의 연산자  +  *
'김왼손' + 'x' + '엘리스' 
==> '김왼손x엘리스' 
'안녕하세요'+' '+ ''반값습니다'
==> '안녕하세요 반값습니다.'

'안녕'*3 
==> '안녕안녕안녕'
'안녕 '*5
==> '안녕 안녕 안녕 안녕 안녕 '

def cls():
    print('\n'*20)

4. 비교 연산자 
==  !=  >  <  >=  <=  

5. 논리 연산자
and(&&)  or(||)  not(!) 

and -->  모두 1일때만 1

or --> 둘중 하나라도 1이면 1

not --> 1은0, 0은1 이 된다.

True and True 
==> True

True and False
==> False

True or False
==> True

False or False
==> False

not False
==> True

not True
==> False

6. 멤버쉽       어떤 원소가 해당 그룹에 속해 있는지 확인.

집단지성들 = ['손종일', '전보라', '엄마']
'전보라' in 집단지성들
==> True

'야야야' in 집단지성들
==> False


--------------------------------------------------------

if문

if 조건 :
    실행할 명령1
    실행할 명령2
    ...

elif 조건:
    실행할 명령1
    실행할 명령2
    ...
else
    실행할 명령1
    실행할 명령2
    ...

--------------------------------------------------------

Loop 반복문

1. While  무한루프

while 조건:
    실행할 명령1
    실행할 명령2
    ...
    실행할 명령n

조건이 맞다면 명령1~명령n 돌고 조건 맞나 다시 확인.
조건이 맞으면 다시 명령1~명령n 돌고 다시 조건맞나 확인
조건이 맞지 않다면 벗어난다.

let = 1
while count < 3:
    print('횟수:', count)
    count+=1;


2. continue, break   반복문 안에서 실행되는 함수이다.

count = 0
while count<10: 
    count += 1
    print ('횟수:', count)
    if count < 4 :
        continue
    if count == 8:
        break

--------------------------------------------------------

Dictionary {key1 : val1, key2 : val2, ...}

my_dict = {}
type(my_dict)
==> <calss 'dict'>

my_dict[key] = val

my_dict[0] = 'a'       딕셔너리에 값 넣기.
my_dict
==> {0: 'a'}

my_dict['b'] = 2
my_dict
==> {0: 'a', 'b':2}

print(my_dict[key])     딕셔너리에서 value 가져오기
==> val

print(my_dict['b'])
==> 2

del my_dict['b']       딕셔너리에서 값 삭제하기.
my_dict
==> {0: 'a'}


------딕셔너리의 메소드

dict.values()               딕셔너라에서 값만 가져오기.

for std in my_dict.values():
    print(std)
==> 
1
2

dict.keys()

for std in my_dict.keys():      딕셔너리에서 키만 가져오기.
    print(std)
==>
a
b

dict.items()

for key, val in my_dict.items():        딕셔너라에서 키, 값 가져오기.
    print(key, val)
==>
a 1
b 2

--------------------------------------------------------

함수   Function

내장 함수, 모듈의 하수, 사용자 정의 함수

def 함수이름(인자1, 인자2, ...):
    실행할 명령1
    실행할 명령2
    ...

    return 결과


def add(num1, num2):
    return num1+num2

add(2,3)
==> 5


def four (num1, num2):
    return num1+num2, num1-num2, num1*num2, num1/num2
four(2,2)
==>(4, 0, 4, 1)

--------------------------------------------------------

random

random.choice()

import random --> random 모듈을 사용한다는것을 정의한다.
students = ['a', 'b', 'c', 'd', 'e']
random.choice(students)
==>  a~eㄱ 까지 중 하나를 골라온다.

students.append('f') 하면 추가 가능하다.

--------------------------------------------------------

random.sample()   -->  여러개의 값을 한번에 뽑을 수 있다.
random.sample(students, 2)
==> students 중 2개를 뽑아온다.

print(random.sample(range(1,46),6))
==> 1~45까지이 수 중 6개를 뽑아온다.


random.randint() --> 8~10까지의 수 중 하나를 뽑아온다.
print(random.randint(8, 10))

--------------------------------------------------------

코딩스타일

PEP8    코딩스타일 가이드? 코딩컨벤션?

파이썬 공식 홈체이지 -> PEP8 Style guide for python code
    번역본 검색해도 나온다.

들여쓰기 - 4개의 공백
space4개 or tab

한 행의 최대 길이 - 79글자 

--------------------------------------------------------

구글링 방법!

파이썬으로 오늘 날짜를 출력하는 방법.
구글링을 통해 찾는다.

오늘 날짜를 가져오는 모듈을 사용

from datetime import datetime

now = datetime.now()
print(datetime.today())

now.year
now.month
now.day

now.hour 등으로 현재 시간을 출력할 수 있다.

파이썬 datetime 을 구글링하면
코딩계의 네이버 지식인인 Stack overflow를 꼭 참고하자