
문자열을 자르기 위해선 

Java 에서는
public static void main(String[] args) {
    String msg = "Life is Short!";
    for(String m : msg.split(""))
    System.out.print(m);
}

파이썬 에서는
msg = "Life is Short!"
print(msg.split())

--------------------------------------------------------

Stack over flow = 코딩계의 네이버 지식인 같은 

idle을 실행하면
바로바로 출력이 가능하다.

파이썬 튜터 라는 사이트 에서 라이브 프로그래밍

--------------------------------------------------------

Numberic 숫자형 (정수형, 실수형)
float = 실수형
int = 정수형

my_float = 3.14
type(my_float)
==> <class 'float'>
my_int=1
type(my_int)
==> <class 'int'>

type은  변수의 타입을 보여준다

--------------------------------------------------------

String 문자열

--------------------------------------------------------

Boolean 참,거짓 / 즉, 예, 아니오
True or False

--------------------------------------------------------

List    [val1, val2]

my_list = [1, 2, 3]

students = ['a', 'b', 'c', 'd']

for a in students:
    print(a)
==> a
    b
    c

import random
print(random.choice(students))
=> a, b, c 중에 랜덤으로 한명만 뽑아온다.

students.append('e') 하면
students = ['a', 'b', 'c', 'd', 'e']
로 추가된다.

studens[1] = 'f' 하면 'b'가 'f'로 변경된다.


- tuple

tuple은 변경 불가능하다. (값을 바꿀 수 없다.)
my_tuple = ('a', 'b', 'c', 'd')
my_tuple[0] = 't' 시 에러가 난다.





-Dictionary 는 {키:밸류, 키:밸류} 로 저장할 수 있다.

my_dict = {'이름' : '손종일', '나이' : 30}
my_dict['이름']
==> '손종일'

my_dict['이름'] = '전보라'
my_dict
==> '이름' : '전보라' , '나이' : 30 으로 변경된다.

--------------------------------------------------------

자료형 변환하기.

my_int = 1
type(my_int)
==> <class 'int'>

float(my_int)
==> 1.0   으로 정수형이 실수형으로 변환된다.

str(my_int)
==> '1'  으로 문자열로 변환된다.

my_str = 'coding'
list(my_str)
==>['c', 'o', 'd', 'i', 'n', 'g']

--------------------------------------------------------

Comment 주석

파이썬 에서는 # 내용 으로 주석을 달 수 있다.

--------------------------------------------------------

문자열
"str" , 'str' 
my_str = :"손씨가족"
print(my_str)
==>김씨가족
type(my_str)
<class 'str'>

my_str = '전씨가족'
print(my_str)
==>전씨가족
type(my_str)
<class 'str'>

my_str = """제스퍼          ---> 큰 따옴표 3개를 써서 여러줄의 문자열을 정할 수 있다.
            토미
            메타"""
my_str
==> '제스퍼\n토미\n메타'

--------------------------------------------------------

Formatting 문자열을 더 잘 표현하기 위해 사용한다.

%d, %f, %s

my_str = 'My name is %s' % 'Sohn'
my_str
==> 'My name is Sohn'

'%d %d' % (1, 2)
==> '1 2'

'%f' % 3.14
'3.140000'

--------------------------------------------------------

Format '{}'.format()  포멧 메소드를 더 많이 사용한다.

'My name is $s' % '손종일'
==> 'My name is 손종일'

'My name is{}'.format(손종일)
==> 'My name is 손종일'

'{} x {} = {}'.format(2,3,2*3)
==> '2x3=6'

'{1}x{0}={2}'.format()(2,3,2*3)     // {1} {0}, {2} 는 인덱스로 나타낼 수 있다.
==> '3x2=6'                             2,3,2*3의 인덱으는 0,1,2 순으로!!

--------------------------------------------------------

Indexing (주소, 위치)

my_name = "손종일 전보라 야야야"
my_name[0]
==> 손

음수로 지정할 수 있다.
반대로 끝부터 -1, -2 순으로 간다.
-1은 야, -11은 손

--------------------------------------------------------

Slicing  

 P y t h o n
0 1 2 3 4 5 6
[1:4] --> yth

my_name = "손종일 전보라 야야야"
my_name[4:7]    4~7 사이를 뽑아오다.
==> '전보라'

my_name[:4]     앞에서 4까지 뽑아온다.
==> '손종일'

my_name[4:]     4부터 끝까지 뽑아온다.
==>'전보라 야야야' 

--------------------------------------------------------

string.split()  --> 매소드
문자열을 공백 단위로 잘라준다.

my_name = "손종일 전보라 야야야"
my_name.split()
==> '손종일', '전보라', '야야야'
my_name.split(' ')
==> '손종일', '전보라', '야야야'
my_name.split('야')
==> '손종일', '전보라', '', '', ''


fruit_str= '거봉 수박 포도 복숭아 망고 딸기 배 참외 찹쌀떡'
fruit_str.splt()
==> ['거봉', '수박', '포도', '복숭아', '망고', '딸기', '배', '참외', '찹쌀떡']

--------------------------------------------------------

Docstirng   """주석""" 이것을 추석처리를 할 수 있다. 보통 함수 설명을 위해 사용한다.

--------------------------------------------------------

end, 이스케이프 코드

print('', end='')

 print('손종일)
 ==> 손종일(엔터) 로 엔터가 들어간다.

 but,
 print('손종일', end='')
 ==> 손종일 로 엔터가 들어가지 않는다.

  print('손종일', end='/')
  ==> 손종일/ 


이스케이프 코드 \n, \t  
--> \n 줄바꿈, \t 탭

--------------------------------------------------------

List   여러개의 값을 한곳에 모아 저장할 수 있다.
    immutable  : 값을 변경할 수 없다.
    mutable : 값을 변경할 수 있다.

std = ['a', 'b', 'c']
==>['a', 'b', 'c']

std.append('d')
std ==> ['a', 'b', 'c', 'd']

person = []
person.append('손종일')
person.append('전보라')
person.append('전희라')
person
==>['손종일', '전보라', '전희라']

animals.append['a']
==> 오류 출력된다.  (animals라는 변수를 지정하지 않았기 때문이다.)

--------------------------------------------------------

Indexing 인덱스 주소 위치를 이용하여 변수에 접근.

animals = ['코알라', '하이에나', '스컹크', '하마', '고래', '다람쥐']
하이애나를 가져오고 싶다.
animals[1]
==> '하이에나'

하마를 없애고 싶다.
del animals[3]
==> ['코알라', '하이에나', '스컹크', '고래', '다람쥐']

animals[1:3]
==> ['하이에나', '스컹크']







