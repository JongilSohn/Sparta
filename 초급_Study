var word = '손종일';

for(const num =0 ; num<10; num=++) { 

    var newWord = prompt(word);
if (word[word.length-1] === newWord[0]) {
    word = newWord;
    alert("맞았습니다.")
}
else {

    alert("틀렸습니다.")
    num=0;
}

}  

Num : 문자를 상수화 시키는 함수





var word = '*';
for(var num =5 ; num>0; num=num-1) { 
console.log(' '.repeat(5-num) + word.repeat(num));                                                                  *****
}                                                                                                                    ****
                                                                                                                      ***
var word = '*';                                                                                                        **
for(var num =5 ; num>0; num=num-1) {                                                                                    *
console.log(word.repeat(num));
}  


var word = '*';                                                                                                      
for(var num =5 ; num>0; num=num-1) {                                                                                  
console.log(word.repeat(num));
}  




var word = '*';                                                                                                      
for(var num =6 ; num>=0; num=num-1) {                       

    if( num>=3) {
        console.log(' '.repeat(Math.abs(num-3)) + word.repeat(Math.abs(2*(7-num)-1)))
    }                                                           
    else {
            console.log(' '.repeat(Math.abs(num-3)) + word.repeat(Math.abs(2*num+1)))
    }   

    }


-------------------------------------------------------------

push : 추가 : li라는 배열의 끝에 데이터를 추가하려고 한다면 li.push('f') 라는 명령어를 사용한다.

concat : 추가 : 여러개의 데이터를 배열의 끝에 한번에 추가하려고 한다면 li.concat(['f', 'g']) 로 추가할 수 있다.

unshift : 추가 : 배열의 앞에 데이터를 추가하려고 한다면 li.unshift('z')를 사용한다.

splice 추가 및 제거 : 배열의 사이에 데이터를 추가하려고 한다면 li.splice(index(배열에 추가할 특정 위치), howmany(index로 부터 제거될 원소들의 수 index~Howmnay 에 해당하는 원소를 삭제.값이 0이면 아무것도
삭제되지 않는다., Element1 ~ ElementN(정수)))

shift : 제거 : li.shift(); 하게되면 li 배열의 첫번째 원소를 제거한다.

pop : 제거 : li.pop() 하게되면 li 배열의 마지막 원소를 제거한다.

sort : 정렬 : 알파벳, 숫자 순으로 정렬된다. (정수 -> 문자열)

reverse : 정렬 : 알파벳, 숫자의 역순으로 정렬된다. (문자열 -> 정수)


-------------------------------------------------------------


객체 

const ab = {'name' : 'Sohn', 'age' = 30}
ab 출력 = {'name' : 'Sohn', 'age' = 30}
ab.name = 'Sohn'
ab[name] = 'Sohn'

객체에 저장된 데이터를 기준으로 반복문을 사용하는 법.

for in 구문을 사용한다.

var ab = {'name' : 'Sohn', 'age' : 30};         
for (key in ab)  {
    document.write("key :" +key+ "value :" +ab[key]+ " <br/>")
}
        --->   key 값을 출력한다.

var ab = {'name' : 'Sohn', 'age' : 30}; 
for (var name in ab)  {
    document.write("key :" +name+ "value :" +ab[name]+ " <br/>")
}
        --->  위의 결과와 같다.  key를 name등 변경 가능하다.


-------------------------------------------------------------


객체지향 프로그래밍 const 변수 = {'key' : value, 'key' = value}

객체지향 프로그래밍이란 grade라는 그릇 안에 list라는것과  출력하는함수 를 같이 넣을 수 있다.

var grade = {
    'list' : {'name' : 'Sohn',
             'age' : 30,
             'contry' : 'KR'
            },
                'show' : function() {
                 for (var name in this.list) {
                     document.write(name+':'+this.list[name]+"<br/>")
                 }
             }
}

-------------------------------------------------------------

41, 42. 모듈 , 모듈화

자주 사용되는 코드를 별도로 만들어 필요할 때마다 사용 가능하다.
momentum 만들때 했던것처럼 Clock, Reset버튼, Greeting처럼 하나씩 분리해서 만드는게 중요하다.


-------------------------------------------------------------

43. Node.js에서의 모듈의 로드

다른 환경에서는 이렇게 사용하는구나 라는 정도만

node.circle.js (로드될 대상)

var PI = Math.PI;

exports.area = function (r) {
    return PI * r * r ;
};

exports.circumference = function (r) {
    return 2 * PI * r;
};


 node.demo.js (로드의 주체)

 var circle = require ('./node.circle.js');

 console.log('The area of circle of radius 4 is'
                + circle.area(4));

=====> node.demo.js 에서 require을 사용해서 위으 node.circl.js파일을 사용할 수 있다.
       아래의 결과값은 demo에서 circle.js의 area 함수를 사용해 결과값을 출력했다.

 실행결과 : 
 F~~~~ 경로>node.demo.js
 The area of a circle of radius 4 is 50.26548245743669

 -------------------------------------------------------------

44, 45. Java 라이브러리란? 라이브러리의 사용

라이브러리는 자주 사용되는 로직을 재사용하기 편리하도록 잘 정리해놓은 일련의 코드의 집합체.

ex) $('#id').click(function click());

function click(){
    $('#list li').text('change text');
}

---> #id라는 id를 가진 놈을 클릭하면 클릭 함수가 호출되고
    클릭 함수는 list라는 태그 안에 li라는 태그 안의 text 값을 '~'로 전부 변경한다. 

-------------------------------------------------------------

49. 정규 표현식

문자열에서 특정한 문자를 찾아내는 도구.

http://opentutorials.org/course/743/6580 정규표현식의 표현

생활코딩 : https://opewnasdnk.com 입니다.
네이버 : https:/www.naver.com 입니다.
--> 링크로 변환
프로그램적으로 짧게 편하게 바꿀 수 있는 방법이 정규 표현식이다.

-------------------------------------------------------------

50. 패턴 만들기.  정규 표현식의 사용 방법.

 정규표현식 리터럴
 var pattern = /a/  -->  a대신 찾고자하는 문자를 입력. 즉 a라는 문자를 찾는다.

 var pattern = new ReqExp('a');   -->  a대신 찾고자하는 문자를 입력. 위와 같다.
 new라는 정규표현식 객체 생성 / a라는 문자를 찾는다.







